class Solution {
    public int[] kWeakestRows(int[][] mat, int k) {
      //ones count , row index
      //if counts equal give small row (remove higher row index)  
      // lowest ones count (remove hiher ones count)

    PriorityQueue<int[]> pq=new PriorityQueue<>((a,b)-> a[0]==b[0] ? b[1]-a[1] : b[0]-a[0] ) ;
      for(int i=0;i<mat.length;i++){
      //   int count=0;
        //   for(int j=0;j<mat[i].length;j++){
        //       if(mat[i][j]==1){
        //           count++;
        //       }
        //  }
      int  count=getCount(mat,i);
          pq.add(new int[]{count,i});
          if(pq.size()>k){
              pq.poll();
          }
      }
      int ans[]=new int[k];
      int idx=k-1;
      while(!pq.isEmpty()){
          ans[idx--]=pq.poll()[1];
      }
      return ans;
    }
    int getCount(int mat[][],int row){
       int start=0;
       int end=mat[row].length-1;
       int ans=-1;
       while(start<=end){
           int mid=start+(end-start)/2;
           if(mat[row][mid]==1){
               ans=mid;
               start=mid+1;
           }else{
               end=mid-1;
           }
       }
       return ans+1;
    }
}
