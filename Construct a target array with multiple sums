class Solution {
    public boolean isPossible(int[] target) {
       if(target.length==1)return target[0]==1;//if only one elemnt that should be one 
        PriorityQueue<Integer> pq=new PriorityQueue<>((a,b)->b-a);
        int sum=0;
        for(int i:target){
            pq.add(i);
            sum=sum+i;
        }
        while(pq.peek()!=1){
            int cur=pq.poll();
           if(sum-cur==1)return true;
            int x=cur%(sum-cur);//value to replace
             sum=sum-cur+x;//updated sum
            if(x==0 || x==cur)return false;
            else pq.add(x);
        }
        return true;
    }
}
/*1.take priorityqueue to maintain cur max
2.each time calculate its value to be replaced as (cur max-all reamining elemnts)  it is written as x=(cur)%(sum-cur)
sum-cur gives value of reamining elemnts   if (cur)%(sum-cur)==1 we reached to our ans add to queue
3.[9, 3, 5] if this gives [1,1,1] as output then it returns true

9 replaced as 9%(3+5)=9%8=1
now array   [1,3,5]
next max  5%(1+3)=5%4=1
array [1,3,1]
next max 3%(1+1)=3%2==1
final array [1,1,1] which returns true

*/
