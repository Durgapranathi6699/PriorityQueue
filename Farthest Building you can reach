https://leetcode.com/problems/furthest-building-you-can-reach/
The algorithm for this is quite simple! We'll store all the non-zero height jumps in a priority queue to represent our max heap. We can do this because we only ever care about the greatest height jump that occurred so far that hasn't been occupied by a ladder. As such, we don't really care about where it is!
Whenever we run out of bricks, we'll add the top of the heap (i.e. the largest height so far) back to our bricks and subtract 1 ladder. If we're out of both supplies, we return our current index.

class Solution {
    public int furthestBuilding(int[] heights, int bricks, int ladders) {
        PriorityQueue<Integer> pq=new PriorityQueue<>((a,b)->b-a);//gives min value when we remove
       for(int i=0;i<heights.length-1;i++){
           if(heights[i]>=heights[i+1])continue;
           bricks-=heights[i+1]-heights[i];
           pq.add(heights[i+1]-heights[i]);
           
           if(bricks<0){
            bricks+=pq.poll();
            if(ladders>0)ladders--;
            else return i;
        }
          
       }
        return heights.length-1;
    }
}
/*
1 st use bricks if bricks are less than 0 replace largest height by ladder and that into briksg
*/
